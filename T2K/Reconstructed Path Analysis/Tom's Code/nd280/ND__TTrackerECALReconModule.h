//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Thu Dec  6 16:29:44 2012 by ROOT version 5.32/00)
//      from the StreamerInfo in file /storage/epp2/phseaj/exercise/prod5_analysis.root
//////////////////////////////////////////////////////////


#ifndef ND__TTrackerECALReconModule_h
#define ND__TTrackerECALReconModule_h
namespace ND {
class TTrackerECALReconModule;
} // end of namespace.

#include "ND__TAnalysisReconModuleBase.h"
#include "TClonesArray.h"
#include "TObject.h"
#include "ND__TTrackerECALReconModule.h"
#include "Riostream.h"
#include <string>
#include <vector>
#include "TVector3.h"
#include "TLorentzVector.h"

namespace ND {
class TTrackerECALReconModule : public ND::TAnalysisReconModuleBase {

public:
// Nested classes forward declaration.
class TECALReconObject;
class TECALReconTrack;
class TECALReconShower;
class TECALReconCluster;
class TECALReconUnmatchedObject;

public:
// Nested classes declaration.
class TECALReconUnmatchedObject : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   int         NHits;       //
   int         View;        //
   double      TotalHitCharge;    //
   double      AverageHitTime;    //
   TVector3    FrontPosition;     //
   TVector3    BackPosition;      //
   int         mostUpStreamLayerHit;    //
   int         mostDownStreamLayerHit;    //
   Int_t       G4ID;                      //
   Int_t       G4ID_Primary;              //
   Int_t       G4ID_Recursive;            //
   Int_t       G4ID_Single;               //

   TECALReconUnmatchedObject();
   TECALReconUnmatchedObject(const TECALReconUnmatchedObject & );
   virtual ~TECALReconUnmatchedObject();

   ClassDef(TECALReconUnmatchedObject,2); // Generated by MakeProject.
};
class TECALReconCluster : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   TLorentzVector Position;    //
   TLorentzVector PositionVar;    //
   int            NDOF;           //
   double         Quality;        //
   int            Status;         //
   double         EDeposit;       //

   TECALReconCluster();
   TECALReconCluster(const TECALReconCluster & );
   virtual ~TECALReconCluster();

   ClassDef(TECALReconCluster,2); // Generated by MakeProject.
};
class TECALReconShower : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   TVector3    ConeAngle;    //
   TVector3    Direction;    //
   double      EDeposit;     //
   int         NDOF;         //
   TLorentzVector Position;     //
   TLorentzVector PositionVar;    //
   TLorentzVector BackPosition;    //
   double         Quality;         //
   int            Status;          //

   TECALReconShower();
   TECALReconShower(const TECALReconShower & );
   virtual ~TECALReconShower();

   ClassDef(TECALReconShower,2); // Generated by MakeProject.
};
class TECALReconTrack : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   double      Curvature;    //
   TVector3    Direction;    //
   double      EDeposit;     //
   int         NDOF;         //
   TLorentzVector Position;     //
   TLorentzVector PositionVar;    //
   TLorentzVector BackPosition;    //
   double         Quality;         //
   TVector3       Width;           //
   int            Status;          //

   TECALReconTrack();
   TECALReconTrack(const TECALReconTrack & );
   virtual ~TECALReconTrack();

   ClassDef(TECALReconTrack,2); // Generated by MakeProject.
};
class TECALReconObject : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   ND::TTrackerECALReconModule::TECALReconTrack Track;       //
   ND::TTrackerECALReconModule::TECALReconShower Shower;      //
   ND::TTrackerECALReconModule::TECALReconCluster Cluster;     //
   UInt_t                                         UniqueID;    //
   Int_t                                          G4ID;        //
   Int_t                                          G4ID_Primary;    //
   Double_t                                       Completeness_Primary;    //
   Double_t                                       Cleanliness_Primary;     //
   Int_t                                          G4ID_Recursive;          //
   Double_t                                       Completeness_Recursive;    //
   Double_t                                       Cleanliness_Recursive;     //
   Int_t                                          G4ID_Single;               //
   Double_t                                       Completeness_Single;       //
   Double_t                                       Cleanliness_Single;        //
   Bool_t                                         IsTrackLike;               //
   Bool_t                                         IsShowerLike;              //
   Int_t                                          TimeBunch;                 //
   Int_t                                          NHits;                     /// Number of hits in this object.
   Int_t                                          NIsXHits;                  //
   Int_t                                          NIsYHits;                  //
   Int_t                                          NIsZHits;                  //
   Int_t                                          NLayersHit;                //
   Int_t                                          maxPerpBarHit;             //
   Int_t                                          maxParaBarHit;             //
   Int_t                                          minBarHit;                 //
   Int_t                                          mostUpStreamLayerHit;      //
   Int_t                                          mostDownStreamLayerHit;    //
   Double_t                                       TotalHitCharge;            /// Sum of charges of the consitituent hits in reconstructed object.
   Double_t                                       AverageHitTime;            /// Average time of hits in reconstructed object.
   string                                         Module;                    /// Name of ECAL module in which object was reconstructed.
   Double_t                                       ObjectLength;              //
   double                                         PID_AMR;                   //
   double                                         PID_Circularity;           //
   double                                         PID_CircularityView0;      //
   double                                         PID_CircularityView1;      //
   double                                         PID_Angle;                 //
   double                                         PID_Max_Ratio;             //
   double                                         PID_ShowerAngle;           //
   double                                         PID_Asymmetry;             //
   double                                         PID_MeanPosition;          //
   double                                         PID_Qskew;                 //
   double                                         PID_ShowerWidth;           //
   double                                         PID_EMLikelihood;          //
   double                                         PID_TrShval;               //
   double                                         PID_EMHadVal;              //
   double                                         PID_TruncatedMaxRatio;     //
   double                                         PID_TransverseChargeRatio;    //
   double                                         PID_NormalizedMipChi2;        //
   double                                         PID_NormalizedMipChi2AllLayers;    //
   double                                         PID_FrontBackRatio;                //
   double                                         PID_FrontBackRatioNumerator;       //
   double                                         PID_FrontBackRatioDenominator;     //
   double                                         Containment;                       //
   double                                         AverageZPosition;                  //
   double                                         EMEnergyFit_Result;                //
   double                                         EMEnergyFit_Uncertainty;           //
   double                                         EMEnergyFit_Likelihood_energyGrad;    //
   double                                         EMEnergyFit_Likelihood_energy_qsumGrad;    //
   double                                         EMEnergyFit_Likelihood_qsum_like;          //
   double                                         EMEnergyFit_Para_QSum;                     //
   double                                         EMEnergyFit_Para_QMean;                    //
   double                                         EMEnergyFit_Para_QRMS;                     //
   double                                         EMEnergyFit_Para_QSkew;                    //
   double                                         EMEnergyFit_Para_QMax;                     //
   double                                         MElectronTag_NDelayedCluster;              //
   vector<double>                                 MElectronTag_NDelayedHits;                 //
   vector<double>                                 MElectronTag_DeltaX;                       //
   vector<double>                                 MElectronTag_DeltaY;                       //
   vector<double>                                 MElectronTag_DeltaZ;                       //
   vector<double>                                 MElectronTag_DeltaT;                       //
   vector<double>                                 MElectronTag_EDep;                         //
   vector<double>                                 MElectronTag_TrackEnd;                     //
   double                                         Thrust;                                    //
   TVector3                                       ThrustOrigin;                              //
   TVector3                                       ThrustAxis;                                //
   int                                            KFNNodes;                                  //
   int                                            KFMultiTracksTPC;                          //
   int                                            KFMultiTracksECAL;                         //
   int                                            KFNDOF;                                    //
   double                                         KFQuality;                                 //
   double                                         KFParameter;                               //
   double                                         KFParameterNodes;                          //
   double                                         KFHitQuality;                              //
   bool                                           KFIsMatched;                               //
   double                                         MatchingLikelihood;                        //
   int                                            FirstLayer;                                //
   int                                            LastLayer;                                 //
   int                                            NHitsAtLayersWithManyHits;                 //
   int                                            NLayersOneHits;                            //
   int                                            NLayersTwoHits;                            //
   int                                            NLayersThreeHits;                          //
   int                                            NLayersFourHits;                           //
   int                                            NLayersFiveHits;                           //
   int                                            NLayersSixHits;                            //
   int                                            NLayersSevenHits;                          //
   int                                            FirstLayerManyHits;                        //
   int                                            SecondLayerManyHits;                       //
   int                                            ThirdLayerManyHits;                        //
   int                                            LastLayerManyHits;                         //
   int                                            MaxHitsInALayer;                           //
   int                                            MaxHitChargeLayer;                         //
   TVector3                                       Pointing;                                  //

   TECALReconObject();
   TECALReconObject(const TECALReconObject & );
   virtual ~TECALReconObject();

   ClassDef(TECALReconObject,2); // Generated by MakeProject.
};

public:
// Data Members.
   Int_t       fNUnmatchedObjects;    //
   bool        fIsMC;                 //
   TClonesArray* fUnmatchedObjects;     //

   TTrackerECALReconModule();
   TTrackerECALReconModule(const TTrackerECALReconModule & );
   virtual ~TTrackerECALReconModule();

   ClassDef(TTrackerECALReconModule,2); // Generated by MakeProject.
};
} // namespace
#endif
